snippet wazero runtime:
  prefix: "wz-01-create-runtime"
  name: "wazero runtime"
  description: "Create a new WebAssembly Runtime"
  scope: "go"
  body: |
    ctx := context.Background()

    // Create a new runtime.
    runtime := wazero.NewRuntime(ctx)

    // This closes everything this Runtime created.
    defer runtime.Close(ctx)

    // Instantiate WASI
    wasi_snapshot_preview1.MustInstantiate(ctx, runtime)

snippet load wasm file:
  prefix: "wz-02-load-wasm-file"
  name: "wasm file"
  description: "Load the WebAssembly module"
  scope: "go"
  body: |
    wasmPath := "../function/demo.wasm"
    wasmDemo, err := os.ReadFile(wasmPath)

    if err != nil {
      log.Panicln(err)
    }

snippet instantiate wasm plugin:
  prefix: "wz-03-instantiate-wasm-plugin"
  name: "wasm plugin"
  description: "Instantiate the Wasm plugin"
  scope: "go"
  body: |
    module, err := runtime.Instantiate(ctx, wasmDemo)
    if err != nil {
      log.Panicln(err)
    }
    // These function are exported by TinyGo
    malloc := module.ExportedFunction("malloc")
    free := module.ExportedFunction("free")

snippet reference to the wasm function:
  prefix: "wz-04-get-ref-wasm-func"
  name: "wasm function"
  description: "Get the reference to the Wasm function: hello"
  scope: "go"
  body: |
    helloFunction := module.ExportedFunction("hello")

snippet passing paramaters:
  prefix: "wz-05-passing-paramaters"
  name: "function parameters"
  description: "Passing parameters to the Wasm function"
  scope: "go"
  body: |
    // Function argument
    name := "Bob Morane"
    nameSize := uint64(len(name))

    // Allocate Memory for "Bob Morane"
    results, err := malloc.Call(ctx, nameSize)
    if err != nil {
      log.Panicln(err)
    }
    namePosition := results[0]

    // Free the pointer when finished
    defer free.Call(ctx, namePosition)

    // Copy "Bob Morane" to memory
    success := module.Memory().Write(uint32(namePosition), []byte(name))
    if !success {
      log.Panicf("out of range of memory size")
    }

snippet call hello function:
  prefix: "wz-06-call-hello-function"
  name: "call hello function"
  description: "Call hello(pos, size)"
  scope: "go"
  body: |
    // Call "hello" with the position and the size of "Bob Morane"
    // The result type is []uint64
    result, err := helloFunction.Call(ctx, namePosition, nameSize)
    if err != nil {
      log.Panicln(err)
    }

    // Extract the position and size of from result
    valuePosition := uint32(result[0] >> 32)
    valueSize := uint32(result[0]) 

snippet display hello result:
  prefix: "wz-07-read-value-from-memory"
  name: "display hello result"
  description: "Read the value from the memory"
  scope: "go"
  body: |
    bytes, ok := module.Memory().Read(valuePosition, valueSize) 

    if !ok {
      log.Panicf("ðŸ˜¡ Out of range of memory size")
    } else {
      fmt.Println("ðŸ˜ƒ Returned value :", string(bytes))
    }

snippet read buffer from memory:
  prefix: "wz-08-read-buffer-from-memory"
  name: "read buffer"
  description: "Read a buffer from the shared memory"
  scope: "go"
  body: |
    func readBufferFromMemory(bufferPosition *uint32, length uint32) []byte {
      subjectBuffer := make([]byte, length)
      pointer := uintptr(unsafe.Pointer(bufferPosition))
      for i := 0; i < int(length); i++ {
        s := *(*int32)(unsafe.Pointer(pointer + uintptr(i)))
        subjectBuffer[i] = byte(s)
      }
      return subjectBuffer
    }

snippet copy buffer to memory:
  prefix: "wz-09-copy-buffer-to-memory"
  name: "copy buffer"
  description: "Copy a buffer to memory"
  scope: "go"
  body: |
    func copyBufferToMemory(buffer []byte) uint64 {
      bufferPtr := &buffer[0]
      unsafePtr := uintptr(unsafe.Pointer(bufferPtr))

      pos := uint32(unsafePtr)     
      size := uint32(len(buffer))

      return (uint64(pos) << uint64(32)) | uint64(size)
    }

snippet hello wasm function:
  prefix: "wz-10-hello-function"
  name: "hello function"
  description: "Define the hello function"
  scope: "go"
  body: |
    //export hello
    func hello(valuePosition *uint32, length uint32) uint64 {
      
      // read the memory to get the argument(s)
      valueBytes := readBufferFromMemory(valuePosition, length)

      message := "ðŸ‘‹ Hello " + string(valueBytes) + " ðŸ˜ƒ"

      fmt.Println("ðŸ§¾:" + message)

      // copy the value to memory
      // get the position and the size of the buffer (in memory)
      posSize := copyBufferToMemory([]byte(message))

      // return the position and size
      return posSize

    }

